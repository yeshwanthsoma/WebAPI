//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankAPI.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class OnlineBankEntities1 : DbContext
    {
        public OnlineBankEntities1()
            : base("name=OnlineBankEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<accountDetail> accountDetails { get; set; }
        public DbSet<accountTypeDetail> accountTypeDetails { get; set; }
        public DbSet<branchDetail> branchDetails { get; set; }
        public DbSet<loginDetail> loginDetails { get; set; }
        public DbSet<transactionDetail> transactionDetails { get; set; }
        public DbSet<userDetail> userDetails { get; set; }
    
        public virtual int addDetails(string accounttype, string dateOfOpen, string status, string dateOfEdited, string closingDate, Nullable<int> amount, string type, Nullable<int> mUserId, Nullable<int> cUserId)
        {
            var accounttypeParameter = accounttype != null ?
                new ObjectParameter("accounttype", accounttype) :
                new ObjectParameter("accounttype", typeof(string));
    
            var dateOfOpenParameter = dateOfOpen != null ?
                new ObjectParameter("DateOfOpen", dateOfOpen) :
                new ObjectParameter("DateOfOpen", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var dateOfEditedParameter = dateOfEdited != null ?
                new ObjectParameter("dateOfEdited", dateOfEdited) :
                new ObjectParameter("dateOfEdited", typeof(string));
    
            var closingDateParameter = closingDate != null ?
                new ObjectParameter("ClosingDate", closingDate) :
                new ObjectParameter("ClosingDate", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var mUserIdParameter = mUserId.HasValue ?
                new ObjectParameter("MUserId", mUserId) :
                new ObjectParameter("MUserId", typeof(int));
    
            var cUserIdParameter = cUserId.HasValue ?
                new ObjectParameter("CUserId", cUserId) :
                new ObjectParameter("CUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addDetails", accounttypeParameter, dateOfOpenParameter, statusParameter, dateOfEditedParameter, closingDateParameter, amountParameter, typeParameter, mUserIdParameter, cUserIdParameter);
        }
    
        public virtual ObjectResult<string> checkCust(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("checkCust", customerIDParameter);
        }
    
        public virtual ObjectResult<string> checkMedal(Nullable<int> amt)
        {
            var amtParameter = amt.HasValue ?
                new ObjectParameter("amt", amt) :
                new ObjectParameter("amt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("checkMedal", amtParameter);
        }
    
        public virtual int datecheck(Nullable<long> acc, string start, string end)
        {
            var accParameter = acc.HasValue ?
                new ObjectParameter("acc", acc) :
                new ObjectParameter("acc", typeof(long));
    
            var startParameter = start != null ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("datecheck", accParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<dateChecker2_Result> dateChecker2(Nullable<long> acc, string start, string end)
        {
            var accParameter = acc.HasValue ?
                new ObjectParameter("acc", acc) :
                new ObjectParameter("acc", typeof(long));
    
            var startParameter = start != null ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(string));
    
            var endParameter = end != null ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dateChecker2_Result>("dateChecker2", accParameter, startParameter, endParameter);
        }
    
        public virtual int EditAccountDetails(Nullable<long> accountNo, string accounttype, string type, string status, string dateOfEdited, string closingDate, Nullable<int> amount, Nullable<int> muserId)
        {
            var accountNoParameter = accountNo.HasValue ?
                new ObjectParameter("accountNo", accountNo) :
                new ObjectParameter("accountNo", typeof(long));
    
            var accounttypeParameter = accounttype != null ?
                new ObjectParameter("accounttype", accounttype) :
                new ObjectParameter("accounttype", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var dateOfEditedParameter = dateOfEdited != null ?
                new ObjectParameter("dateOfEdited", dateOfEdited) :
                new ObjectParameter("dateOfEdited", typeof(string));
    
            var closingDateParameter = closingDate != null ?
                new ObjectParameter("ClosingDate", closingDate) :
                new ObjectParameter("ClosingDate", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var muserIdParameter = muserId.HasValue ?
                new ObjectParameter("MuserId", muserId) :
                new ObjectParameter("MuserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditAccountDetails", accountNoParameter, accounttypeParameter, typeParameter, statusParameter, dateOfEditedParameter, closingDateParameter, amountParameter, muserIdParameter);
        }
    }
}
